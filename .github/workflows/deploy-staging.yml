name: Build & Deploy (Staging)

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  DOCKER_IMAGE: mulaflow
  DEPLOYMENT_TAG: staging
  DOCKER_COMPOSE_FILE: docker/compose/staging/docker-compose.yml

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
        
      - name: Build Docker image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:staging \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        
      - name: Push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DEPLOYMENT_TAG }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Create secrets directory
        run: |
          mkdir -p docker/compose/staging/secrets
          echo "Creating application-secrets.properties with environment variables"
          cat <<EOF > docker/compose/staging/secrets/application-secrets.properties
          spring.application.name=mulaflow

          # Database configuration
          spring.datasource.url=${STAGING_DB_URL}
          spring.datasource.username=${STAGING_DB_USERNAME}
          spring.datasource.password=${STAGING_DB_PASSWORD}
          
          # Other secrets
          datadog.api.key=${DATADOG_API_KEY}
          EOF
      
      - name: Install Docker Compose
        run: |
          sudo apt-get update \
          && curl -SL https://github.com/docker/compose/releases/download/v2.35.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose \
          && chmod +x /usr/local/bin/docker-compose
      
      - name: Deploy to Staging
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
          STAGING_DB_USERNAME: ${{ secrets.STAGING_DB_USERNAME }}
          STAGING_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          DEPLOYMENT_TAG: ${{ env.DEPLOYMENT_TAG }}

        run: |
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} pull
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d

  deploy-to-render:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Render
        id: render-deploy
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "${{ secrets.RENDER_STAGING_SERVICE_ID }}",
              "image": "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DEPLOYMENT_TAG }}"
            }' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys")
          
          # Extract deployment ID and URL
          deploy_id=$(echo "$response" | jq -r '.id')
          deploy_url=$(echo "$response" | jq -r '.service.serviceDetails.url')
          
          # Save outputs for subsequent steps
          echo "deploy_id=$deploy_id" >> $GITHUB_OUTPUT
          echo "deploy_url=$deploy_url" >> $GITHUB_OUTPUT
          
          # Wait for deployment completion (adjust timeout as needed)
          timeout=300  # 5 minutes
          interval=10
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            status=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys/$deploy_id" | jq -r '.status')
            
            if [ "$status" = "live" ]; then
              echo "Deployment successful!"
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$status" = "failed" ]; then
              echo "Deployment failed!"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
            echo "Waiting for deployment to complete... ($elapsed/$timeout seconds)"
          done
          
          echo "Deployment timed out!"
          echo "status=timeout" >> $GITHUB_OUTPUT
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub with deployment URL
        if: steps.render-deploy.outputs.status == 'success'
        run: |
          echo "Deployment URL: ${{ steps.render-deploy.outputs.deploy_url }}"
          # Create a deployment status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "state": "success",
              "target_url": "${{ steps.render-deploy.outputs.deploy_url }}",
              "description": "Deployed to Render",
              "environment": "staging"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.run_id }}/statuses"

      - name: Notify on failure
        if: steps.render-deploy.outputs.status != 'success'
        run: |
          echo "Deployment failed with status: ${{ steps.render-deploy.outputs.status }}"
          # Create a failed deployment status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "state": "failure",
              "description": "Render deployment failed",
              "environment": "staging"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.run_id }}/statuses"
          exit 1

  # deploy-to-render:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Render
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
  #           -H "Content-Type: application/json" \
  #           -d '{
  #             "serviceId": "${{ secrets.RENDER_STAGING_SERVICE_ID }}",
  #             "image": "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DEPLOYMENT_TAG }}"
  #           }' \
  #           "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys"

  
